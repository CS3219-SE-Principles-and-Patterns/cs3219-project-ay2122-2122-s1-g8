###* Auth
### Register
POST http://localhost:3030/api/register
Content-Type: application/json

{
    "username": "alan",
    "password": "cs3219",
    "email": "alan@yahoo.com"
}

### Login
POST http://localhost:3030/api/login
Content-Type: application/json

{
    "username": "alan",
    "password": "cs3219"
}
###* Auth End



### Success. Currently indicating room id in User.status field
POST http://localhost:3030/api/match/new
Content-Type: application/json

{
    "username": "oongjiexiang",
    "difficulty": "Medium"
}

###
POST http://localhost:3030/api/match/status
Content-Type: application/json

{
    "username": "oongjiexiang",
    "difficulty": "Medium"
}

###
POST http://localhost:3030/api/match/drop
Content-Type: application/json

{
    "username": "oongjiexiang",
    "difficulty": "Easy"
}

### 
POST http://localhost:3030/api/match/new
Content-Type: application/json

{
    "username": "joshua",
    "difficulty": "Easy"
}

### 
POST http://localhost:3030/api/match/status
Content-Type: application/json

{
    "username": "joshua",
    "difficulty": "Easy"
}

### 
POST http://localhost:3030/api/match/new
Content-Type: application/json

{
    "username": "alan",
    "difficulty": "Easy"
}

### 
POST http://localhost:3030/api/match/status
Content-Type: application/json

{
    "username": "alan",
    "difficulty": "Easy"
}

### fails: no such username
POST http://localhost:3030/api/match/new
Content-Type: application/json

{
    "username": "a",
    "difficulty": "Hard"
}

### fails: difficulty not found
POST http://localhost:3030/api/match/new
Content-Type: application/json

{
    "username": "user",
    "difficulty": "no_difficulty"
}

### fails: no difficulty
POST http://localhost:3030/api/match/new
Content-Type: application/json

{
    "username": "user"
}


### Update Question Type
POST http://peerprep.herokuapp.com/api/updateQuestionType
Content-Type: application/json

{
    "username": "oongjiexiang"
}

# 1. New match request with correct username. 200
# 2. New match request with non-existent username. 404
# 3. Only one match request and call /status. 202
# 4. Only one match request and call /drop. 200 dropped
# 5. Two new match requests with different difficulties. Both /status 202
# 6. Two new match requests with same difficulties. Both 200. Then call /status, which returns roomId (must be same)
# 7. Two new match requests with same difficulties. Then third match request. Third's /status 202, whereas first and second have same roomId and 200